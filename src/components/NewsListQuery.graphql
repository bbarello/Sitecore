# This file contains a GraphQL query that will be executed and the result provided to
# your JSS component. You can run this query in GraphiQL ($endpoint/ui) for a nice editing experience.

# Note that we're executing _two queries_ (datasource and contextItem)
# within the context of the NewsListQuery _operation_. This makes it
# very efficient at gathering data from multiple sources.

query NewsListQuery($datasource: String!, $contextItem: String!, $language: String!) {
  # Datasource query
  # $datasource will always be set to the ID of the rendering's datasource item
  # (as long as the GraphQLData helper is used)
  datasource: item(path: $datasource, language: $language) {
    id
    name
    # Strongly-typed querying on known templates is possible!
    ...on NewsList {
      # Single-line text field
      heading {
        # the 'jsonValue' field is a JSON blob that represents the object that
        # should be passed to JSS field rendering helpers (i.e. text, image, link)
        jsonValue
        value
      }
      newsItems {
        # the 'jsonValue' field is a JSON blob that represents the object that
        # should be passed to JSS field rendering helpers (i.e. text, image, link)
        jsonValue
        value
      }
    }
  }

  # Context/route item query
  # $contextItem will always be set to the ID of the current context item (the route item)
  # (as long as the GraphQLData helper is used)
  contextItem: item(path: $contextItem, language: $language) {
    id
    # Get the page title from the app route template
    ...on AppRoute {
      pageTitle {
        value
      }
    }
  }
}
